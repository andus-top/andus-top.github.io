<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[office 2019 专业增强版 在线安装+激活]]></title>
    <url>%2F2019%2F08%2F14%2Foffice-2019-%E4%B8%93%E4%B8%9A%E5%A2%9E%E5%BC%BA%E7%89%88-%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85-%E6%BF%80%E6%B4%BB%2F</url>
    <content type="text"><![CDATA[最新office2019,在线安装激活教程 注明：软件来自网络 1.在线安装+激活只激活，直接看第二点 链接：https://pan.baidu.com/s/1kGxTRLzjbdz_LRRBgCS3pA提取码：oqmp失效请留言 如图 2.只激活传送门：https://blog.csdn.net/bluewn/article/details/90480847]]></content>
      <categories>
        <category>破解</category>
      </categories>
      <tags>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux(Ubuntu 18.04 LTS)使用记录]]></title>
    <url>%2F2019%2F07%2F21%2FLinux-Ubuntu-18-04-LTS-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[一篇关于Ubuntu的使用记录，包含分区，双系统安装教程，常用软件安装及配置… 系统：ubuntu18.04 LTS 置顶安利一个网站：https://www.lulinux.com/deepin-wine-QQ、百度网盘、WPS等应用解决方案：https://www.lulinux.com/archives/1319deepin软件仓库：http://packages.deepin.com/deepin/pool/non-free/双系统的安装：Windows10+Ubuntu18.04+双硬盘(SSD+HDD)安装双系统 1. 分区与挂载Linux新建分区https://blog.csdn.net/github_33809414/article/details/85208666/usr目录挂载到新分区https://blog.csdn.net/github_33809414/article/details/85207300/var目录挂载到新分区https://blog.csdn.net/github_33809414/article/details/85221274开机自动挂载https://blog.csdn.net/qwfys200/article/details/79737780 2. 连接校园网https://blog.csdn.net/github_33809414/article/details/85054911 3. 替换阿里源https://www.cnblogs.com/lyon2014/p/4715379.html 4. 安装搜狗输入法https://blog.csdn.net/fx_yzjy101/article/details/80243710重启后，搜狗拼音输入法候选栏无法显示中文（乱码）https://my.oschina.net/i1sfish/blog/1822964中英文无法切换我的解决方法是: fcitx 设置中加入英文键盘即可 5. firefox浏览器安装flashhttps://blog.csdn.net/weixin_40522162/article/details/80287296 6.安装百度云，失败，参考置顶https://jingyan.baidu.com/article/a24b33cdc99c1e19fe002b93.htmlhttps://blog.csdn.net/cheng_ku/article/details/80286172 7. 安装crossover，建议不要折腾windows应用很卡，还要收费，放弃https://my.oschina.net/u/3275937/blog/2995386https://blog.csdn.net/valecalida/article/details/81084210 8. 安装vmware!!不要升级内核，就用默认的(4.15.0-46-generic)。否则vmware不能运行。最终安装成功版本VMware Workstation Pro 15.0.2 for Linux，参照的第二个链接https://www.jianshu.com/p/5fc43bbbac5ahttps://blog.csdn.net/wy_bk/article/details/80017140需要安装gcc7https://blog.csdn.net/weixin_35762621/article/details/80336291问题：/vmware/Ubuntu.vmdk' or one of the snapshot disks it depends onhttps://blog.csdn.net/guomutian911/article/details/42673147 9. 内核的升级与卸载升级内核https://www.linuxidc.com/Linux/2018-06/152714.htm卸载内核https://blog.csdn.net/wf19930209/article/details/81879777 10. 安装/卸载mysqlmysql5.7安装https://segmentfault.com/a/1190000012703513 (目录名称都不要自定义)其中： /etc/my.cnf 中 pid-file=自定义一个有权限的目录 ，/var/run下重启后mysqld目录会消失，导致无法启动卸载https://www.cnblogs.com/jpfss/p/7932019.html问题：没有chkconfig命令https://blog.csdn.net/elim051/article/details/6173367You must reset your password using ALTER USER statement before executing this statement.https://www.cnblogs.com/debmzhang/p/5013540.html mysql8.0.16https://www.cnblogs.com/luoli-/p/9249769.html 11. 安装navicat在安装好deepin-wine的环境下：安装navicat11.2下载：http://packages.deepin.com/deepin/pool/non-free/n/navicat/navicat_11.2.9_amd64.deb进入安装目录 cd /usr/share/navicat/ 删除全部内容 sudo rm -r Navicat 将Windows中破解好的Navicat拷贝到 /usr/share/navicat/ 目录下 sudo cp -r Navicat /usr/share/navicat/ 注意：由于deepin的navicat是11.2.9的，所以windows下的破解版也要是11.2版本的才可以传送门：https://pan.baidu.com/s/1hsfBv2VtAd0jsekJwQGJuA 提取码：71nu 安装navicat12.1.18https://www.52pojie.cn/thread-966298-1-1.htmlhttps://github.com/DoubleLabyrinth/navicat-keygen/blob/windows/README_FOR_LINUX.zh-CN.md#navicat-keygen---for-linux 解决navicat中文乱码https://blog.csdn.net/qq_38250124/article/details/83898364https://blog.csdn.net/yuxiao97/article/details/84886921 12. 安装postmanhttp://packages.deepin.com/deepin/pool/non-free/p/postman/postman_6.0.9_amd64.deb 13. 安装ieaseMusichttps://github.com/trazyn/ieaseMusic/releases/download/v1.2.6/ieaseMusic-1.2.6-linux-amd64.deb 13. 安装qq，失败，参考置顶https://blog.csdn.net/qq_36428171/article/details/81209475 13. 安装微信，参考置顶网页版微信,加了个壳，没有电脑版好用 https://www.cnblogs.com/dunitian/p/9124806.html 14. 区域语言设置http://blog.sina.com.cn/s/blog_49f914ab0100sbsp.html 15. 静态iphttps://jingyan.baidu.com/article/29697b91558683ab20de3c95.htmlhttps://blog.csdn.net/qq_42975842/article/details/81705244 16. ssh免密登录https://blog.csdn.net/changhenshui1990/article/details/72896548https://www.cnblogs.com/ivan0626/p/4144277.html系统重装后清除原来的ssh信息：ssh-keygen -f "~/.ssh/known_hosts" -R "目标ip" 17. 安装openvpn安装http://www.seekswan.com/support_course_info_178开机自启openvpnhttps://www.jianshu.com/p/9af5d5a046f9 18. 卸载Ubuntu中wine安装的程序https://www.cnblogs.com/jackchiang/p/4072621.html 19. 安装markdown编辑器(Typora)http://packages.deepin.com/deepin/pool/non-free/t/typora/typora_0.9.53-1_amd64.deb 20. WPS for Linux（ubuntu）字体配置(字体缺失解决办法)https://www.cnblogs.com/liangml/p/5969404.html其他错误：INCORRECT PERMISSIONS ON /USR/LIB/PO1KIT-AGENT-HELPER-1(NEEDS TO BE SETUID ROOT)https://www.cnblogs.com/tl542475736/p/9461669.html 21. 在linux中使用vi 打开文件时，能显示行号https://blog.csdn.net/yuanyuan_186/article/details/51306202 22. 安装Virtualboxhttps://www.cnblogs.com/pealicx/p/9028414.htmlhttps://blog.csdn.net/weixin_43331296/article/details/83025126 23. 设置样式(桌面、顶栏、字体)https://www.jianshu.com/p/de37682ecbda]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis第一次启动，SHUTDOWN时提示： (error) ERR Errors trying to SHUTDOWN. Check logs.]]></title>
    <url>%2F2018%2F09%2F13%2FRedis%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%90%AF%E5%8A%A8%EF%BC%8CSHUTDOWN%E6%97%B6%E6%8F%90%E7%A4%BA%EF%BC%9A-error-ERR-Errors-trying-to-SHUTDOWN-Check-logs%2F</url>
    <content type="text"><![CDATA[今天我也是第一次玩redis，从下载到安装到HelloWorld一切顺风顺水，谁知在最后关闭redis时，出现了(error) ERR Errors trying to SHUTDOWN. Check logs.错误。下面贴出我的解决过程（可能有点繁琐） 今天我也是第一次玩redis，从下载到安装到HelloWorld一切顺风顺水，谁知在最后关闭redis时，出现了(error) ERR Errors trying to SHUTDOWN. Check logs.错误。下面贴出我的解决过程（可能有点繁琐） 环境Ubuntu 18.04 LTSredis-4.0.11 错误重现 解决过程很明显不保存就能关闭，多半跟日志文件有关系，就直接查看配置文件中关于日志的配置，如下：进行如下修改：再次启动，居然报错：于是查看日志文件权限，发现只有root用户有写权限：修改日志文件权限：再次启动：再次关闭，问题依然，感觉一朝回到解放前：继续找问题, 大致跟刚才同样的思路，找那种没有写权限的地方，发现如下：于是，查看一下/usr/local/myredis文件夹权限，与之前日志文件权限一样：索性直接把目录改成自己定义的：修改/usr/local/myredis/db_files/目录权限：查看结果：希望能对你有所帮助！]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库字段级权限设计]]></title>
    <url>%2F2018%2F08%2F27%2FMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%BA%A7%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[单纯个人设计的，关于数据库字段权限控制的解决方案，并附代码实现。应该有很多不足，有不好的地方可以指出，或者有更好的想法可以评论，一起交流^-^ 一、 引言 业务场景 在一个类似数据统计的系统中，由于统计的数据较多，就有较多的表，每个表有较多的字段，但是又不想让每个用户都看到全部的表或者表的全部字段，比如一些重要的统计数据，应该是只有管理员才能看到的。 举个例子(无实际意义) ID name day_amount week_amount month_amount 1 脑点子 1,000 7,000 30,000 A用户只能看到name，day_amount 两个字段；B用户只能看到name，month_amount两个字段。 二、 解决方案 方案一 用户表、用户-表名-字段映射表优点：实现简单缺点：每个用户，每个表，每个字段都需单独设置，较为繁琐 方案二 用户表、角色表、用户-角色映射表、角色-表名-字段映射表(优先级低)、用户-表名-字段映射表(优先级高)优点：可通过角色实现批量设置权限；且也可对某个用户权限进行单独设置缺点：权限局限于数据库单个表。 方案三 用户表、角色表、用户-角色映射表、数据类型表、类型-表名-字段映射表(优先级低)、角色-类型映射表、用户-表名-字段映射表(优先级高)优点：在方案二的基础上，可实现跨表的权限控制。缺点：实现较为繁琐，要不要采用主要还是根据用户的需求 对外权限分配接口 三种都按照表名作为一级节点，字段作为二级节点来分配权限。 方案一只能按照单个用户来分配权限 方案二按照角色/单个用户来分配 方案三按照类型/单个用户来分配 存在的问题 1）数据库结构变更时，与该表相关的所有权限都需要重新设置 2）部分不在数据库的字段，如根据多列的值计算出来的属性字段的权限不好处理。 3）只支持单张表的查询，不支持多表查询 部分解决思路 问题2）的暂时的解决思路是：再单独建一张表——用户/角色/类型-JAVA类名-属性名映射表，再配合JSON序列化的属性过滤来实现权限控制。这种方式基本跟完全写死没什么区别，对后期的维护及扩展极不友好！ 问题3）的解决思路是：放弃掉SQL语句的连接查询，全部改成由代码控制 三、 代码最初是打算在Spring Aop的前置通知中通过修改目标方法参数来实现，但是通过源码发现封装目标方法参数的类是用final修饰的，所以后面换了种思路。 使用Spring的AbstractAutoProxyCreator自动代理实现，思路是通过条件判断决定是否要使用自动代理，要使用代理的话，就需要自己实现MethodInterceptor接口并重写其中invoke方法。 下面我贴出核心代码，文章最后会给出整个demo的链接 继承AbstractAutoProxyCreator类，重写getAdvicesAndAdvisorsForBean()方法 1234567891011121314151617181920212223242526public class BeanTypeAutoProxyCreator extends AbstractAutoProxyCreator &#123; @Override protected Object[] getAdvicesAndAdvisorsForBean(Class&lt;?&gt; beanClass, String beanName, TargetSource customTargetSource) throws BeansException &#123; return isMatch(beanClass) ? PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS : DO_NOT_PROXY; &#125; /** * 判断是否是需要被代理的对象 * @param clazz 代理对象的类型 * @return */ private boolean isMatch(Class&lt;?&gt; clazz) &#123; //有两个Class类型的类象，一个是调用isAssignableFrom方法的类对象（后称对象a）， // 以及方法中作为参数的这个类对象(称之为对象b)，这两个对象如果满足以下条件则返回true，否则返回false： //a对象所对应类信息是b对象所对应的类信息的父类或者是父接口，简单理解即a是b的父类或接口 //a对象所对应类信息与b对象所对应的类信息相同，简单理解即a和b为同一个类或同一个接口 if (BaseMapper.class.isAssignableFrom(clazz)) &#123; return true; &#125; return false; &#125;&#125; 实现MethodInterceptor接口，重写invoke()方法 123456789101112131415161718192021222324252627282930313233public class MyMethodInterceptor implements MethodInterceptor &#123; @Autowired private SysAccess sysAccess; @Override public Object invoke(MethodInvocation invocation) throws Throwable &#123; // 权限封装类 SysAccessCriteria result = null; int flag = -1; // 目标方法的参数 Object[] args = invocation.getArguments(); for (int i=0; i&lt;args.length; i++) &#123; // 只修改权限条件类型的参数 if(args[i] instanceof SysAccessCriteria)&#123; SysAccessCriteria sysAccessCriteria = (SysAccessCriteria) args[i]; result = sysAccess.getUserAceess(sysAccessCriteria); flag = i; &#125; &#125; // 修改目标参数 if(flag &gt;= 0 &amp;&amp; result != null)&#123; args[flag] = result; &#125; // 执行目标方法 Object object = invocation.proceed(); return object; &#125;&#125; 配置到Spring配置文件中 12345678910&lt;bean id="myMethodInterceptor" class="com.ysl.access.proxy.MyMethodInterceptor"&gt;&lt;/bean&gt;&lt;!--配置自动代理--&gt;&lt;bean id="myBeanTypeAutoProxyCreator" class="com.ysl.access.proxy.BeanTypeAutoProxyCreator"&gt; &lt;!--父类属性--&gt; &lt;property name="interceptorNames"&gt; &lt;list&gt; &lt;value&gt;myMethodInterceptor&lt;/value&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt; Demo完整代码(数据库文件在resources目录下)：https://github.com/andus-top/columns-accsss单纯个人设计，应该有很多不足，有不好的地方可以指出，或者有更好的想法可以评论，一起交流。 参考：https://blog.csdn.net/lilongjiu/article/details/78047051]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>权限设计</tag>
        <tag>Mysql</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-axios 前后端分离 跨域访问的实现]]></title>
    <url>%2F2018%2F08%2F22%2Fvue-axios-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[一篇关于vue-axios与ssm工程跨域配置的记录… 一. 基本环境 前端vue：2.5.6axios：0.18使用vue脚手架构建项目。参照：webstorm搭建vue项目 后台ssm框架 前后端数据采用json格式传输 二. 前端配置 axios配置 安装 1npm install axios --save 在所需组件中引入axios 1import axios from 'axios'; 在&lt;script&gt;中配置axios参数 123456const myaxios = axios// 不跨域的axios// 如果要跨域的话, 对axios进行一些设置,当前使用的是跨域的const axiosInstance = axios.create(&#123; headers: &#123;'Content-Type': 'application/json;charset=utf-8'&#125;,// 设置传输内容的类型和编码 withCredentials: true,// 指定某个请求应该发送凭据。允许客户端携带跨域cookie，也需要此配置&#125;); 代理配置打开config/index.js文件，找到dev对象里面的proxyTable修改为如下内容： 12345678910proxyTable: &#123; '/api': &#123; target:'http://127.0.0.1:80', // secure: false, // 如果是https接口，需要配置这个参数 changeOrigin:true, pathRewrite:&#123; '^/api': '' &#125; &#125;&#125;, target 的参数就是你要访问的服务器地址, 你在代码里面写/api就等于写了这个地址 , 比如我要访问http://127.0.0.1:80/vue-ssm/login这个接口在代码里面只需写/api/vue-ssm/login就可以了 使用axios发送请求 123456789// 跨域访问axiosInstance.post('/api/vue-ssm/login', 请求的参数,).then( response =&gt; &#123; console.log(response.data);// response.data为后端返回的具体数据 alert("请求成功");&#125;).catch( error =&gt; &#123; alert("请求失败");&#125;); axios详细参数配置可以参考：Axios 中文说明 三. 后端配置 使用SpringMvc的HandlerInterceptorAdapter拦截器 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public class RquestInterceptor extends HandlerInterceptorAdapter &#123; /** * 预处理回调方法，实现处理器的预处理（如检查登陆），第三个参数为响应的处理器，自定义Controller * 返回值：true表示继续流程（如调用下一个拦截器或处理器）；false表示流程中断（如登录检查失败）， * 不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应； */ @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; // 允许客户端携带跨域cookie // 当Access-Control-Allow-Credentials设为true的时候，Access-Control-Allow-Origin不能设为星号 response.setHeader("Access-Control-Allow-Credentials", "true"); // 允许指定域访问跨域资源 //response.setHeader("Access-Control-Allow-Origin", "http://127.0.0.1:9006, http://127.0.0.1:8080"); response.setHeader("Access-Control-Allow-Origin", request.getHeader("Origin"));// * // 允许浏览器发送的请求消息头 response.setHeader("Access-Control-Allow-Headers", request.getHeader("Access-Control-Request-Headers"));// * // 允许浏览器在预检请求成功之后发送的实际请求方法名 response.setHeader("Access-Control-Allow-Methods", request.getHeader("Access-Control-Request-Method")); // 设置响应数据格式 response.setHeader("Content-Type", "application/json"); // 查看请求方法 String method= request.getMethod(); System.out.println(method); return true; &#125; /*下面的方法可以不重写*/ /** * 后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象） * 对模型数据进行处理或对视图进行处理，modelAndView也可能为null。 */ @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123; super.postHandle(request, response, handler, modelAndView); &#125; /** * 整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间， * 还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中 */ @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123; super.afterCompletion(request, response, handler, ex); &#125; /** * 处理异步请求 * 不是HandlerInterceptor的接口实现，是AsyncHandlerInterceptor的 * AsyncHandlerInterceptor实现了HandlerInterceptor */ public void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; super.afterConcurrentHandlingStarted(request, response, handler); &#125;&#125; 配置到SpringMvc配置文件 123456789&lt;mvc:interceptors&gt; &lt;!-- 注意拦截器的执行顺序，会按照这里配置顺序执行 --&gt; &lt;mvc:interceptor&gt; &lt;mvc:mapping path="/**" /&gt;&lt;!--匹配所有路径--&gt; &lt;bean class="com.ysl.interceptor.RquestInterceptor" /&gt; &lt;/mvc:interceptor&gt; &lt;!-- 其他拦截器 --&gt; &lt;mvc:interceptor&gt;&lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt; 好了，这就是我使用axios实现跨域访问的全过程，希望对大家有所帮助。 参考：https://blog.csdn.net/huang100qi/article/details/77132096https://blog.csdn.net/qq_22844483/article/details/78661030https://www.jianshu.com/p/1e8d088c2be9https://segmentfault.com/a/1190000015597029]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>axios</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
</search>
